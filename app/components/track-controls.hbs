{{#each @trackNodesForControls as |trackNode idx|}}
  {{#if (eq @visibleNodeIdx idx)}}
    <div class="flex justify-start h-100 overflow-y-scroll mw-100">
      <div class="h-auto flex flex-column tc track-controls-container-pb overflow-y">
        {{#each trackNode.multisliderControls as |trackControl|}}
          <TrackControlWrapper
            class="track-control-wrapper-mb"
            @sequence={{@track.currentSequence.sequence}}
            @trackControl={{trackControl}}
            @wrapperStyleClass="mr2"
            as |multisliderWidth|
          >
            {{!-- 
              render the track control component eg nexus-multislider
              this is equivalent to <NexusMultislider> but can be set dynamically
            --}}
            <SequencePagination 
              @sequence={{@track.currentSequence.sequence}} 
              @stepIndex={{@track.stepIndex}}
              as |sequencePaginated page|
            >
              <div 
                class="sequencer-width"
                {{did-update (fn this.scrollToPageOffset page)}}
              >
                <NexusMultislider
                  @stepIndex={{@track.stepIndex}}
                  @sequence={{@track.currentSequence.sequence}}
                  @values={{trackControl.controlArrayComputed}}
                  @min={{trackControl.min}}
                  @max={{trackControl.max}}
                  @width={{multisliderWidth}}
                  @defaultValue={{trackControl.defaultValue}}
                  @onChangeValue={{fn @updateControl trackControl}}
                />
              </div>
            </SequencePagination>
          </TrackControlWrapper>
        {{/each}}
      </div>
      <div class="flex flex-nowrap tc mh3">
        {{#each trackNode.oneDimensionalControls as |trackControl|}}
          <TrackControlWrapper
            @sequence={{@track.currentSequence.sequence}}
            @trackControl={{trackControl}}
            @wrapperStyleClass="mh2 ph3"
          >
            {{!-- 
              render the track control component eg nexus-slider
              this is equivalent to <NexusSlider> but can be set dynamically
            --}}
            {{component
              (concat "nexus-" trackControl.interfaceName)
              value=trackControl.controlValue
              values=trackControl.controlArrayComputed
              min=trackControl.min
              max=trackControl.max
              defaultValue=trackControl.defaultValue
              onChangeValue=(fn @updateControl trackControl)
            }}
          </TrackControlWrapper>
        {{/each}}
      </div>
    </div>
  {{/if}}
{{/each}}
